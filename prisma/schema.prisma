generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String                 @id @default(cuid())
    name                 String?
    email                String?                @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    TeamUser             TeamUser[]
    Elo                  LeagueUser[]
    WinnerLeagueMatch    LeagueMatch[]          @relation("match_winner_id")
    LoserLeagueMatch     LeagueMatch[]          @relation("match_loser_id")
    SwissTournament      SwissTournament[]
    User1TournamentMatch SwissTournamentMatch[] @relation("tournament_match_user1_id")
    User2TournamentMatch SwissTournamentMatch[] @relation("tournament_match_user2_id")
    SwissTournamentUser  SwissTournamentUser[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Role {
    id            String     @id @default(cuid())
    name          String
    createdAt     DateTime   @default(now())
    TeamUser      TeamUser[]
    AdminTeam     Team?      @relation("team_role_adminId")
    ModeratorTeam Team?      @relation("team_role_moderatorId")
    MemberTeam    Team?      @relation("team_role_memberId")
}

model Team {
    id                   String                 @id @default(cuid())
    name                 String
    image                String?
    description          String?
    password             String?
    createdAt            DateTime               @default(now())
    adminRoleId          String                 @unique
    moderatorRoleId      String                 @unique
    memberRoleId         String                 @unique
    RoleAdmin            Role                   @relation("team_role_adminId", fields: [adminRoleId], references: [id])
    RoleModerator        Role                   @relation("team_role_moderatorId", fields: [moderatorRoleId], references: [id])
    RoleMember           Role                   @relation("team_role_memberId", fields: [memberRoleId], references: [id])
    League               League[]
    TeamUser             TeamUser[]
    LeagueUser           LeagueUser[]
    LeagueMatch          LeagueMatch[]
    SwissTournament      SwissTournament[]
    SwissTournamentUser  SwissTournamentUser[]
    SwissTournamentMatch SwissTournamentMatch[]
}

model TeamUser {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    team      Team     @relation(fields: [teamId], references: [id])
    teamId    String
    role      Role     @relation(fields: [roleId], references: [id])
    roleId    String
    image     String   @default("https://github.com/shadcn.png")
    gamerTag  String   @default("GamerTagTeamUser")
    createdAt DateTime @default(now())

    @@unique([userId, teamId])
}

model League {
    id                   String                 @id @default(cuid())
    name                 String
    teamId               String
    Team                 Team                   @relation(fields: [teamId], references: [id])
    LeagueUser           LeagueUser[]
    matchCount           Int                    @default(0)
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
    Match                LeagueMatch[]
    SwissTournament      SwissTournament[]
    SwissTournamentUser  SwissTournamentUser[]
    SwissTournamentMatch SwissTournamentMatch[]

    @@unique([teamId, name])
}

model LeagueUser {
    id             String   @id @default(cuid())
    userId         String
    user           User     @relation(fields: [userId], references: [id])
    teamId         String
    team           Team     @relation(fields: [teamId], references: [id])
    leagueId       String
    league         League   @relation(fields: [leagueId], references: [id])
    elo            Int      @default(1200)
    streak         Int      @default(0)
    matchLossCount Int      @default(0)
    matchCount     Int      @default(0)
    latestEloGain  String   @default("[]") //todo: hmmm, this is actually a list. Always use zod to validate its structure
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    @@unique([userId, leagueId])
}

model LeagueMatch {
    id           String   @id @default(cuid())
    winnerId     String
    loserId      String
    WinnerUser   User     @relation("match_winner_id", fields: [winnerId], references: [id])
    LoserUser    User     @relation("match_loser_id", fields: [loserId], references: [id])
    teamId       String
    team         Team     @relation(fields: [teamId], references: [id])
    leagueId     String
    league       League   @relation(fields: [leagueId], references: [id])
    preWinnerElo Int
    preLoserElo  Int
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([winnerId])
    @@index([loserId])
}

model SwissTournament {
    id           String  @id @default(cuid())
    name         String
    description  String? @default("No description")
    image        String? @default("")
    isOpen       Boolean
    roundLimit   Int
    currentRound Int     @default(0)

    Match    SwissTournamentMatch[]
    userId   String
    user     User                   @relation(fields: [userId], references: [id])
    leagueId String
    league   League                 @relation(fields: [leagueId], references: [id])
    teamId   String
    team     Team                   @relation(fields: [teamId], references: [id])

    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    SwissTournamentUser SwissTournamentUser[]
}

model SwissTournamentUser {
    id                String          @id @default(cuid())
    userId            String
    user              User            @relation(fields: [userId], references: [id])
    swissTournamentId String
    swissTournament   SwissTournament @relation(fields: [swissTournamentId], references: [id])
    leagueId          String
    league            League          @relation(fields: [leagueId], references: [id])
    teamId            String
    team              Team            @relation(fields: [teamId], references: [id])

    placement Int @default(0)
    score     Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, swissTournamentId])
}

enum MatchStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
}

model SwissTournamentMatch {
    id     String      @id @default(cuid())
    status MatchStatus @default(PENDING)

    round   Int
    userId1 String
    userId2 String
    User1   User   @relation("tournament_match_user1_id", fields: [userId1], references: [id])
    User2   User   @relation("tournament_match_user2_id", fields: [userId2], references: [id])

    preWinnerElo Int?
    preLoserElo  Int?
    winnerId     String?

    leagueId     String
    league       League          @relation(fields: [leagueId], references: [id])
    teamId       String
    team         Team            @relation(fields: [teamId], references: [id])
    tournamentId String
    tournament   SwissTournament @relation(fields: [tournamentId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId1])
    @@index([userId2])
}
